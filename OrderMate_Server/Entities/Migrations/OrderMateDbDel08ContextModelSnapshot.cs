// <auto-generated />
using System;
using Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(OrderMateDbDel08Context))]
    partial class OrderMateDbDel08ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Advertisement_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementDateIdFk")
                        .HasColumnName("Advertisement_Date_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("AdvertisementDescription")
                        .IsRequired()
                        .HasColumnName("Advertisement_Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<byte[]>("AdvertisementFile")
                        .HasColumnName("Advertisement_File")
                        .HasColumnType("image");

                    b.Property<string>("AdvertisementName")
                        .IsRequired()
                        .HasColumnName("Advertisement_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("AdvertisementPriceIdFk")
                        .HasColumnName("Advertisement_Price_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementId")
                        .HasName("PK_Table_1_Advertisement_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AdvertisementDateIdFk");

                    b.HasIndex("AdvertisementId")
                        .IsUnique()
                        .HasName("UX_Table_1_Advertisement_Id");

                    b.HasIndex("AdvertisementPriceIdFk");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("Entities.Models.AdvertisementDate", b =>
                {
                    b.Property<int>("AdvertisementDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Advertisement_Date_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdvertisementDateActiveTo")
                        .HasColumnName("Advertisement_Date_Active_To")
                        .HasColumnType("date");

                    b.Property<DateTime>("AdvertisementDateAcvtiveFrom")
                        .HasColumnName("Advertisement_Date_Acvtive_From")
                        .HasColumnType("date");

                    b.HasKey("AdvertisementDateId")
                        .HasName("PK_Table_1_Advertisement_Date_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AdvertisementDateId")
                        .IsUnique()
                        .HasName("UX_Table_1_Advertisement_Date_Id");

                    b.ToTable("Advertisement_Date");
                });

            modelBuilder.Entity("Entities.Models.AdvertisementPrice", b =>
                {
                    b.Property<int>("AdvertisementPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Advertisement_Price_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdvertisementPriceDateUpdated")
                        .HasColumnName("Advertisement_Price_Date_Updated")
                        .HasColumnType("date");

                    b.Property<double>("AdvertismentPrice")
                        .HasColumnName("Advertisment_Price")
                        .HasColumnType("float");

                    b.HasKey("AdvertisementPriceId")
                        .HasName("PK_Table_1_Advertisement_Price_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AdvertisementPriceId")
                        .IsUnique()
                        .HasName("UX_Table_1_Advertisement_Price_Id");

                    b.ToTable("Advertisement_Price");
                });

            modelBuilder.Entity("Entities.Models.Allergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Allergy_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Allergy1")
                        .IsRequired()
                        .HasColumnName("Allergy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AllergyId")
                        .HasName("PK_Table_1_Allergy_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AllergyId")
                        .IsUnique()
                        .HasName("UX_Table_1_Allergy_Id");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Entities.Models.AttendanceSheet", b =>
                {
                    b.Property<int>("AttendanceSheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Attendance_Sheet_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ClockInDateTime")
                        .HasColumnName("Clock_In_Date_Time")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ClockOutDateTime")
                        .HasColumnName("Clock_Out_Date_Time")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeIdFk")
                        .HasColumnName("Employee_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("AttendanceSheetId")
                        .HasName("PK_Table_1_Attendance_Sheet_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AttendanceSheetId")
                        .IsUnique()
                        .HasName("UX_Table_1_Attendance_Sheet_Id");

                    b.HasIndex("EmployeeIdFk");

                    b.ToTable("Attendance_Sheet");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Employee_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeIdNumber")
                        .IsRequired()
                        .HasColumnName("Employee_Id_Number")
                        .HasColumnType("varchar(13)")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<int?>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Table_1_Employee_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasName("UX_Table_1_Employee_Id");

                    b.HasIndex("EmployeeIdNumber")
                        .IsUnique()
                        .HasName("UX_Table_1_Employee_Id_Number");

                    b.HasIndex("RestaurantIdFk");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Entities.Models.EmployeeShift", b =>
                {
                    b.Property<int>("EmployeeShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Employee_Shift_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeIdFk")
                        .HasColumnName("Employee_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("ShiftIdFk")
                        .HasColumnName("Shift_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("EmployeeShiftId")
                        .HasName("PK_Employee_Shift_Employee_Shift_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeIdFk");

                    b.HasIndex("EmployeeShiftId");

                    b.HasIndex("ShiftIdFk");

                    b.ToTable("Employee_Shift");
                });

            modelBuilder.Entity("Entities.Models.ItemTypeMenuMenuItem", b =>
                {
                    b.Property<int>("ItemTypeMenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Item_Type_menu_Item_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuItemIdFk")
                        .HasColumnName("Menu_Item_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemTypeIdFk")
                        .HasColumnName("Menu_Item_Type_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("ItemTypeMenuItemId")
                        .HasName("PK_Item_Type_Menu_Menu_Item_Item_Type_menu_Item_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ItemTypeMenuItemId");

                    b.HasIndex("MenuItemIdFk");

                    b.HasIndex("MenuItemTypeIdFk");

                    b.ToTable("Item_Type_Menu_Menu_Item");
                });

            modelBuilder.Entity("Entities.Models.LayoutType", b =>
                {
                    b.Property<int>("LayoutTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Layout_Type_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LayoutType1")
                        .IsRequired()
                        .HasColumnName("Layout_Type")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LayoutTypeId")
                        .HasName("PK_Layout_Type_Layout_Type_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("LayoutTypeId")
                        .IsUnique()
                        .HasName("AK_Table_1_Layout_Type_Id");

                    b.ToTable("Layout_Type");
                });

            modelBuilder.Entity("Entities.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Menu_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("MenuDateCreated")
                        .HasColumnName("Menu_Date_Created")
                        .HasColumnType("date");

                    b.Property<string>("MenuDescription")
                        .IsRequired()
                        .HasColumnName("Menu_Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnName("Menu_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<TimeSpan?>("MenuTimeActiveFrom")
                        .HasColumnName("Menu_Time_Active_From")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("MenuTimeActiveTo")
                        .HasColumnName("Menu_Time_Active_To")
                        .HasColumnType("time");

                    b.HasKey("MenuId")
                        .HasName("PK_Table_1_Menu_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MenuId")
                        .IsUnique()
                        .HasName("UX_Table_1_Menu_Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Entities.Models.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Menu_Item_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MenuItemCategoryIdFk")
                        .HasColumnName("Menu_Item_Category_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("MenuItemDescription")
                        .IsRequired()
                        .HasColumnName("Menu_Item_Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnName("Menu_Item_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MenuItemPriceIdFk")
                        .HasColumnName("Menu_Item_Price_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("MenuItemId")
                        .HasName("PK_Table_1_Menu_Item_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MenuItemCategoryIdFk");

                    b.HasIndex("MenuItemId")
                        .IsUnique()
                        .HasName("UX_Table_1_Menu_Item_Id");

                    b.HasIndex("MenuItemPriceIdFk");

                    b.ToTable("Menu_Item");
                });

            modelBuilder.Entity("Entities.Models.MenuItemAllergy", b =>
                {
                    b.Property<int>("MenuItemAllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Menu_Item_Allergy_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllergyIdFk")
                        .HasColumnName("Allergy_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemIdFk")
                        .HasColumnName("Menu_Item_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("MenuItemAllergyId")
                        .HasName("PK_Menu_Item_Allergy_Menu_Item_Allergy_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AllergyIdFk");

                    b.HasIndex("MenuItemAllergyId");

                    b.HasIndex("MenuItemIdFk");

                    b.ToTable("Menu_Item_Allergy");
                });

            modelBuilder.Entity("Entities.Models.MenuItemCategory", b =>
                {
                    b.Property<int>("MenuItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Menu_Item_Category_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MenuItemCategory1")
                        .IsRequired()
                        .HasColumnName("Menu_Item_Category")
                        .HasColumnType("nchar(15)")
                        .IsFixedLength(true)
                        .HasMaxLength(15);

                    b.HasKey("MenuItemCategoryId")
                        .HasName("PK_Table_1_Menu_Item_Category_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MenuItemCategoryId")
                        .IsUnique()
                        .HasName("UX_Table_1_Menu_Item_Category_Id");

                    b.ToTable("Menu_Item_Category");
                });

            modelBuilder.Entity("Entities.Models.MenuItemPrice", b =>
                {
                    b.Property<int>("MenuItemPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Menu_Item_Price_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("MenuItemDateUpdated")
                        .HasColumnName("Menu_Item_Date_Updated")
                        .HasColumnType("date");

                    b.Property<double>("MenuItemPrice1")
                        .HasColumnName("Menu_Item_Price")
                        .HasColumnType("float");

                    b.HasKey("MenuItemPriceId")
                        .HasName("PK_Table_1_Menu_Item_Price_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MenuItemPriceId")
                        .IsUnique()
                        .HasName("UX_Table_1_Menu_Item_Price_Id");

                    b.ToTable("Menu_Item_Price");
                });

            modelBuilder.Entity("Entities.Models.MenuItemSpecial", b =>
                {
                    b.Property<int>("MenuItemSpecialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Menu_Item_Special_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuItemIdFk")
                        .HasColumnName("Menu_Item_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("SpecialIdFk")
                        .HasColumnName("Special_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("MenuItemSpecialId")
                        .HasName("PK_Menu_Item_Special_Menu_Item_Special_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MenuItemIdFk");

                    b.HasIndex("MenuItemSpecialId");

                    b.HasIndex("SpecialIdFk");

                    b.ToTable("Menu_Item_Special");
                });

            modelBuilder.Entity("Entities.Models.MenuItemType", b =>
                {
                    b.Property<int>("MenuItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Menu_Item_Type_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MenuItemType1")
                        .IsRequired()
                        .HasColumnName("Menu_Item_Type")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MenuItemTypeId")
                        .HasName("PK_Table_1_Menu_Item_Type_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MenuItemTypeId")
                        .IsUnique()
                        .HasName("UX_Table_1_Menu_Item_Type_Id");

                    b.ToTable("Menu_Item_Type");
                });

            modelBuilder.Entity("Entities.Models.MenuRestaurant", b =>
                {
                    b.Property<int>("MenuRestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Menu_Restaurant_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuIdFk")
                        .HasColumnName("Menu_Id_FK")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemIdFk")
                        .HasColumnName("Menu_Item_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("MenuRestaurantId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MenuIdFk");

                    b.HasIndex("MenuItemIdFk");

                    b.HasIndex("RestaurantIdFk");

                    b.ToTable("Menu_Restaurant");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Order_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("OrderDateCompleted")
                        .HasColumnName("Order_Date_Completed")
                        .HasColumnType("date");

                    b.Property<DateTime>("OrderDateCreated")
                        .HasColumnName("Order_Date_Created")
                        .HasColumnType("date");

                    b.Property<int?>("OrderStatusIdFk")
                        .HasColumnName("Order_Status_Id_FK")
                        .HasColumnType("int");

                    b.Property<int?>("QrCodeSeatingIdFk")
                        .HasColumnName("QrCode_Seating_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK_Order_Order_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasName("UX_Order_Order_Id");

                    b.HasIndex("OrderStatusIdFk");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Entities.Models.OrderLine", b =>
                {
                    b.Property<int>("OrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Order_Line_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemComments")
                        .IsRequired()
                        .HasColumnName("Item_Comments")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("ItemQty")
                        .HasColumnName("Item_Qty")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemIdFk")
                        .HasColumnName("Menu_Item_Id_FK")
                        .HasColumnType("int");

                    b.Property<int?>("OrderIdFk")
                        .HasColumnName("Order_Id_FK")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialIdFk")
                        .HasColumnName("Special_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("UserIdFk")
                        .HasColumnName("User_Id_FK")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderLineId")
                        .HasName("PK_Table_1_Order_Line_id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MenuItemIdFk");

                    b.HasIndex("OrderIdFk");

                    b.HasIndex("OrderLineId")
                        .IsUnique()
                        .HasName("UX_Table_1_Order_Line_id");

                    b.HasIndex("SpecialIdFk");

                    b.HasIndex("UserIdFk");

                    b.ToTable("Order_Line");
                });

            modelBuilder.Entity("Entities.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Order_Status_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrderStatus1")
                        .IsRequired()
                        .HasColumnName("Order_Status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("OrderStatusId")
                        .HasName("PK_Table_1_Order_Status_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrderStatusId")
                        .IsUnique()
                        .HasName("UX_Table_1_Order_Status_Id");

                    b.ToTable("Order_Status");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Product_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductCategoryIdFk")
                        .HasColumnName("Product_Category_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .HasColumnName("Product_Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("Product_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("ProductOnHand")
                        .HasColumnName("Product_On_Hand")
                        .HasColumnType("int");

                    b.Property<int?>("ProductReorderFreqIdFk")
                        .HasColumnName("Product_Reorder_Freq_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("ProductReorderLevel")
                        .HasColumnName("Product_Reorder_Level")
                        .HasColumnType("int");

                    b.Property<int?>("ProductTypeIdFk")
                        .HasColumnName("Product_Type_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK_Table_1_Product_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductCategoryIdFk");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasName("UX_Table_1_Product_Id");

                    b.HasIndex("ProductName")
                        .IsUnique()
                        .HasName("UX_Table_1_Product_Name");

                    b.HasIndex("ProductReorderFreqIdFk");

                    b.HasIndex("ProductTypeIdFk");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Entities.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Product_Category_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductCategory1")
                        .IsRequired()
                        .HasColumnName("Product_Category")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ProductCategoryId")
                        .HasName("PK_Table_1_Product_Category_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductCategory1")
                        .IsUnique()
                        .HasName("UX_Table_1_Product_Category");

                    b.HasIndex("ProductCategoryId")
                        .IsUnique()
                        .HasName("UX_Table_1_Product_Category_Id");

                    b.ToTable("Product_Category");
                });

            modelBuilder.Entity("Entities.Models.ProductReorderFreq", b =>
                {
                    b.Property<int>("ProductReorderFreqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Product_Reorder_Freq_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductReorderFreq1")
                        .IsRequired()
                        .HasColumnName("Product_Reorder_Freq")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ProductReorderFreqId")
                        .HasName("PK_Product_Reorder_Freq_Product_Reorder_Freq_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductReorderFreq1")
                        .IsUnique()
                        .HasName("UX_Table_1_Product_Reorder_Freq");

                    b.HasIndex("ProductReorderFreqId")
                        .IsUnique()
                        .HasName("UX_Product_Reorder_Freq_Product_Reorder_Freq_Id");

                    b.ToTable("Product_Reorder_Freq");
                });

            modelBuilder.Entity("Entities.Models.ProductStockTake", b =>
                {
                    b.Property<int>("ProductStockTakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Product_Stock_Take_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeIdFk")
                        .HasColumnName("Employee_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("ProductIdFk")
                        .HasColumnName("Product_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("ProductStockTakeQty")
                        .HasColumnName("Product_Stock_Take_Qty")
                        .HasColumnType("int");

                    b.Property<int>("StockTakeIdFk")
                        .HasColumnName("Stock_Take_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("ProductStockTakeId")
                        .HasName("PK_Product_Stock_Take_Product_Stock_Take_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeIdFk");

                    b.HasIndex("ProductIdFk");

                    b.HasIndex("ProductStockTakeId");

                    b.HasIndex("StockTakeIdFk");

                    b.ToTable("Product_Stock_Take");
                });

            modelBuilder.Entity("Entities.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Product_Type_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductType1")
                        .IsRequired()
                        .HasColumnName("Product_Type")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ProductTypeId")
                        .HasName("PK_Table_1_Product_Type_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductType1")
                        .IsUnique()
                        .HasName("UX_Table_1_Product_Type");

                    b.HasIndex("ProductTypeId")
                        .IsUnique()
                        .HasName("UX_Table_1_Product_Type_Id");

                    b.ToTable("Product_Type");
                });

            modelBuilder.Entity("Entities.Models.ProductWrittenOff", b =>
                {
                    b.Property<int>("WrittenOffStockIdFk")
                        .HasColumnName("Written_Off_Stock_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("ProductIdFk")
                        .HasColumnName("Product_Id_FK")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeIdFk")
                        .HasColumnName("Employee_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("WrittenOffQty")
                        .HasColumnName("Written_Off_Qty")
                        .HasColumnType("int");

                    b.HasKey("WrittenOffStockIdFk", "ProductIdFk")
                        .HasName("PK_Product_Written_Off_Written_Off_Stock_Id_FK_Product_Id_FK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("EmployeeIdFk");

                    b.HasIndex("ProductIdFk");

                    b.ToTable("Product_Written_Off");
                });

            modelBuilder.Entity("Entities.Models.QrCode", b =>
                {
                    b.Property<int>("QrCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QrCode_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("QrCodeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("QrCodeId")
                        .IsUnique()
                        .HasName("AK_QrCode_QrCode_Id");

                    b.HasIndex("RestaurantIdFk");

                    b.ToTable("QrCode");
                });

            modelBuilder.Entity("Entities.Models.QrCodeSeating", b =>
                {
                    b.Property<int>("QrCodeSeatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QrCode_Seating_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NrOfPeople")
                        .HasColumnName("Nr_Of_People")
                        .HasColumnType("int");

                    b.Property<int?>("OrderIdFk")
                        .HasColumnName("Order_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("QrCodeIdFk")
                        .HasColumnName("QrCode_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("SeatingIdFk")
                        .HasColumnName("SeatingId_FK")
                        .HasColumnType("int");

                    b.HasKey("QrCodeSeatingId")
                        .HasName("PK_QrCode_Seating_QrCode_Seating_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("OrderIdFk");

                    b.HasIndex("QrCodeIdFk");

                    b.HasIndex("QrCodeSeatingId")
                        .IsUnique()
                        .HasName("UX_QrCode_Seating_QrCode_Seating_Id");

                    b.HasIndex("SeatingIdFk");

                    b.ToTable("QrCode_Seating");
                });

            modelBuilder.Entity("Entities.Models.ResaurantFacilityRef", b =>
                {
                    b.Property<int>("RestaurantFacilityRefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Restaurant_Facility_Ref_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RestaurantFacilityIdFk")
                        .HasColumnName("Restaurant_Facility_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("RestaurantFacilityRefId")
                        .HasName("PK_Resaurant_Facility_Ref_Restaurant_Facility_Ref_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RestaurantFacilityIdFk");

                    b.HasIndex("RestaurantFacilityRefId");

                    b.HasIndex("RestaurantIdFk");

                    b.ToTable("Resaurant_Facility_Ref");
                });

            modelBuilder.Entity("Entities.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Reservation_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ReservationDateCreated")
                        .HasColumnName("Reservation_date_Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ReservationDateReserved")
                        .HasColumnName("Reservation_Date_Reserved")
                        .HasColumnType("datetime");

                    b.Property<int>("ReservationNumberOfBills")
                        .HasColumnName("Reservation_NumberOfBills")
                        .HasColumnType("int");

                    b.Property<int>("ReservationPartyQty")
                        .HasColumnName("Reservation_Party_Qty")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationStatusIdFk")
                        .HasColumnName("Reservation_Status_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("UserIdFk")
                        .HasColumnName("User_Id_FK")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationId")
                        .HasName("PK_Reservation_Reservation_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ReservationId")
                        .IsUnique()
                        .HasName("UX_Reservation_Reservation_Id");

                    b.HasIndex("ReservationStatusIdFk");

                    b.HasIndex("UserIdFk");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Entities.Models.ReservationRestaurant", b =>
                {
                    b.Property<int>("ReservationRestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Reservation_Restaurant_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReservationIdFk")
                        .HasColumnName("Reservation_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("ReservationRestaurantId")
                        .HasName("PK_Reservation_Restaurant_Reservation_Restaurant_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ReservationIdFk");

                    b.HasIndex("ReservationRestaurantId");

                    b.HasIndex("RestaurantIdFk");

                    b.ToTable("Reservation_Restaurant");
                });

            modelBuilder.Entity("Entities.Models.ReservationStatus", b =>
                {
                    b.Property<int>("ReservationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Reservation_Status_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReservationStatus1")
                        .IsRequired()
                        .HasColumnName("Reservation_Status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ReservationStatusId")
                        .HasName("PK_Table_1_Reservation_Status_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ReservationStatusId")
                        .IsUnique()
                        .HasName("UX_Table_1_Reservation_Status_Id");

                    b.ToTable("Reservation_Status");
                });

            modelBuilder.Entity("Entities.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Restaurant_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QrCodeIdFk")
                        .HasColumnName("QrCode_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("ResaturantAddressLine2")
                        .IsRequired()
                        .HasColumnName("Resaturant_Address_Line_2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RestaurantAddressLine1")
                        .IsRequired()
                        .HasColumnName("Restaurant_Address_Line_1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RestaurantCity")
                        .IsRequired()
                        .HasColumnName("Restaurant_City")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RestaurantCountry")
                        .IsRequired()
                        .HasColumnName("Restaurant_Country")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("RestaurantDateCreated")
                        .HasColumnName("Restaurant_Date_Created")
                        .HasColumnType("date");

                    b.Property<string>("RestaurantDescription")
                        .IsRequired()
                        .HasColumnName("Restaurant_Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnName("Restaurant_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RestaurantPostalCode")
                        .IsRequired()
                        .HasColumnName("Restaurant_Postal_Code")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("RestaurantProvince")
                        .IsRequired()
                        .HasColumnName("Restaurant_Province")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("RestaurantStatusIdFk")
                        .HasColumnName("Restaurant_Status_ID_FK")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantUrl")
                        .HasColumnName("Restaurant_Url")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("SocialMediaIdFk")
                        .HasColumnName("Social_Media_Id_FK")
                        .HasColumnType("int");

                    b.Property<int?>("SocialMediaTypeIdFkFk")
                        .HasColumnName("Social_Media_Type_Id_FK_FK")
                        .HasColumnType("int");

                    b.HasKey("RestaurantId")
                        .HasName("PK_Table_1_Restaurant_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RestaurantId")
                        .IsUnique()
                        .HasName("UX_Table_1_Restaurant_Id");

                    b.HasIndex("RestaurantStatusIdFk");

                    b.HasIndex("SocialMediaIdFk", "SocialMediaTypeIdFkFk");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("Entities.Models.RestaurantAdvertisement", b =>
                {
                    b.Property<int>("RestaurantAdvertisesementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Restaurant_Advertisesement_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementIdFk")
                        .HasColumnName("Advertisement_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("RestaurantAdvertisesementId")
                        .HasName("PK_Restaurant_Advertisement_Restaurant_Advertisesement_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AdvertisementIdFk");

                    b.HasIndex("RestaurantAdvertisesementId");

                    b.HasIndex("RestaurantIdFk");

                    b.ToTable("Restaurant_Advertisement");
                });

            modelBuilder.Entity("Entities.Models.RestaurantFacility", b =>
                {
                    b.Property<int>("RestaurantFacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Restaurant_Facility_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RestaurantFacility1")
                        .IsRequired()
                        .HasColumnName("Restaurant_Facility")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RestaurantFacilityId")
                        .HasName("PK_Table_1_Restaurant_Facility_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RestaurantFacilityId")
                        .IsUnique()
                        .HasName("UX_Table_1_Restaurant_Facility_Id");

                    b.ToTable("Restaurant_Facility");
                });

            modelBuilder.Entity("Entities.Models.RestaurantImage", b =>
                {
                    b.Property<int>("RestaurantImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Restaurant_Image_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageDescription")
                        .IsRequired()
                        .HasColumnName("Image_Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<byte[]>("ImageFile")
                        .HasColumnName("Image_File")
                        .HasColumnType("image");

                    b.Property<int?>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("RestaurantImageId")
                        .HasName("PK_Table_1_Restaurant_Image_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RestaurantIdFk");

                    b.HasIndex("RestaurantImageId")
                        .IsUnique()
                        .HasName("UX_Table_1_Restaurant_Image_Id");

                    b.ToTable("Restaurant_Image");
                });

            modelBuilder.Entity("Entities.Models.RestaurantRestaurantImage", b =>
                {
                    b.Property<int>("RestaurantRestaurantImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Restaurant_Restaurant_Image_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantImageIdFk")
                        .HasColumnName("Restaurant_Image_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("RestaurantRestaurantImageId")
                        .HasName("PK_Restaurant_Restaurant_Image_Restaurant_Restaurant_Image_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RestaurantIdFk");

                    b.HasIndex("RestaurantImageIdFk");

                    b.HasIndex("RestaurantRestaurantImageId");

                    b.ToTable("Restaurant_Restaurant_Image");
                });

            modelBuilder.Entity("Entities.Models.RestaurantStatus", b =>
                {
                    b.Property<int>("RestaurantStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Restaurant_Status_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantStatus1")
                        .IsRequired()
                        .HasColumnName("Restaurant_Status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RestaurantStatusId")
                        .HasName("PK_Table_1_Restaurant_Status_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RestaurantStatusId")
                        .IsUnique()
                        .HasName("UX_Table_1_Restaurant_Status_ID");

                    b.ToTable("Restaurant_Status");
                });

            modelBuilder.Entity("Entities.Models.RestaurantType", b =>
                {
                    b.Property<int>("RestaurantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Restaurant_Type_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RestaurantType1")
                        .IsRequired()
                        .HasColumnName("Restaurant_Type")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("RestaurantTypeId")
                        .HasName("PK_Table_1_Restaurant_Type_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RestaurantTypeId")
                        .IsUnique()
                        .HasName("AK_Table_1_Restaurant_Facility_Id");

                    b.ToTable("Restaurant_Type");
                });

            modelBuilder.Entity("Entities.Models.RestaurantTypeReference", b =>
                {
                    b.Property<int>("RestaurantTypeRefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Restaurant_Type_Ref_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantTypeIdFk")
                        .HasColumnName("Restaurant_Type_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("RestaurantTypeRefId")
                        .HasName("PK_Restaurant_Type_Reference_Restaurant_Type_Ref_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RestaurantIdFk");

                    b.HasIndex("RestaurantTypeIdFk");

                    b.HasIndex("RestaurantTypeRefId");

                    b.ToTable("Restaurant_Type_Reference");
                });

            modelBuilder.Entity("Entities.Models.Seating", b =>
                {
                    b.Property<int>("SeatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ReservationIdFk")
                        .HasColumnName("Reservation_Id_FK")
                        .HasColumnType("int");

                    b.Property<DateTime>("SeatingDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("SeatingTime")
                        .HasColumnType("time");

                    b.HasKey("SeatingId")
                        .HasName("PK_Seating_SeatingId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ReservationIdFk");

                    b.HasIndex("SeatingId")
                        .IsUnique()
                        .HasName("AK_Seating_SeatingId");

                    b.ToTable("Seating");
                });

            modelBuilder.Entity("Entities.Models.SeatingLayout", b =>
                {
                    b.Property<int>("SeatingLayoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Seating_Layout_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.Property<int>("LayoutTypeIdFk")
                        .HasColumnName("Layout_Type_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("SeatingLayoutQty")
                        .IsRequired()
                        .HasColumnName("Seating_Layout_Qty")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("SeatingLayoutId", "RestaurantIdFk", "LayoutTypeIdFk")
                        .HasName("Seating_Layout_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("LayoutTypeIdFk");

                    b.HasIndex("RestaurantIdFk");

                    b.HasIndex("SeatingLayoutId")
                        .IsUnique()
                        .HasName("UX_Table_1_Seating_Layout_Id");

                    b.ToTable("Seating_Layout");
                });

            modelBuilder.Entity("Entities.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Shift_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShiftCapacity")
                        .HasColumnName("Shift_Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShiftEndDateTime")
                        .HasColumnName("Shift_End_Date_Time")
                        .HasColumnType("datetime");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnName("Shift_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ShiftStartDateTime")
                        .HasColumnName("Shift_Start_Date_Time")
                        .HasColumnType("datetime");

                    b.Property<int?>("ShiftStatusIdFk")
                        .HasColumnName("Shift_Status_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("ShiftId")
                        .HasName("PK_Table_1_Shift_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ShiftId")
                        .IsUnique()
                        .HasName("UX_Table_1_Shift_Id");

                    b.HasIndex("ShiftName")
                        .IsUnique()
                        .HasName("UX_Table_1_Shift_Name");

                    b.HasIndex("ShiftStatusIdFk");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("Entities.Models.ShiftStatus", b =>
                {
                    b.Property<int>("ShiftStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Shift_Status_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ShiftStatus1")
                        .IsRequired()
                        .HasColumnName("Shift_Status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ShiftStatusId")
                        .HasName("PK_Table_1_Shift_Status_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ShiftStatus1")
                        .IsUnique()
                        .HasName("UX_Table_1_Shift_Status");

                    b.HasIndex("ShiftStatusId")
                        .IsUnique()
                        .HasName("UX_Table_1_Shift_Status_Id");

                    b.ToTable("Shift_Status");
                });

            modelBuilder.Entity("Entities.Models.SocialMedia", b =>
                {
                    b.Property<int>("SocialMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Social_Media_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SocialMediaTypeIdFk")
                        .HasColumnName("Social_Media_Type_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("SocialMediaAddress")
                        .IsRequired()
                        .HasColumnName("Social_Media_Address")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("SocialMediaId", "SocialMediaTypeIdFk")
                        .HasName("Social_Media_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SocialMediaId")
                        .IsUnique()
                        .HasName("UX_Table_1_Social_Media_Id");

                    b.HasIndex("SocialMediaTypeIdFk");

                    b.ToTable("Social_Media");
                });

            modelBuilder.Entity("Entities.Models.SocialMediaType", b =>
                {
                    b.Property<int>("SocialMediaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Social_Media_Type_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SocialMediaType1")
                        .IsRequired()
                        .HasColumnName("Social_Media_Type")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("SocialMediaTypeId")
                        .HasName("PK_Table_1_Social_Media_Type_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SocialMediaTypeId")
                        .IsUnique()
                        .HasName("UX_Table_1_Social_Media_Type_Id");

                    b.ToTable("Social_Media_Type");
                });

            modelBuilder.Entity("Entities.Models.Special", b =>
                {
                    b.Property<int>("SpecialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Special_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpecialDescription")
                        .IsRequired()
                        .HasColumnName("Special_Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("SpecialEndDate")
                        .HasColumnName("Special_End_Date")
                        .HasColumnType("date");

                    b.Property<string>("SpecialName")
                        .IsRequired()
                        .HasColumnName("Special_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("SpecialStartDate")
                        .HasColumnName("Special_Start_Date")
                        .HasColumnType("date");

                    b.HasKey("SpecialId")
                        .HasName("PK_Table_1_Special_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SpecialId")
                        .IsUnique()
                        .HasName("UX_Table_1_Special_Id");

                    b.ToTable("Special");
                });

            modelBuilder.Entity("Entities.Models.SpecialPrice", b =>
                {
                    b.Property<int>("SpecialPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Special_Price_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SpecialIdFk")
                        .HasColumnName("Special_Id_FK")
                        .HasColumnType("int");

                    b.Property<double>("SpecialPrice1")
                        .HasColumnName("Special_Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("SpecialPriceDateUpdated")
                        .HasColumnName("Special_Price_Date_Updated")
                        .HasColumnType("date");

                    b.HasKey("SpecialPriceId")
                        .HasName("PK_Table_1_Special_Price_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SpecialIdFk");

                    b.HasIndex("SpecialPriceId")
                        .IsUnique()
                        .HasName("UX_Table_1_Special_Price_Id");

                    b.ToTable("Special_Price");
                });

            modelBuilder.Entity("Entities.Models.StarRating", b =>
                {
                    b.Property<int>("StarRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Star_Rating_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StarRatingValue")
                        .HasColumnName("Star_Rating_Value")
                        .HasColumnType("int");

                    b.Property<int?>("UserCommentIdFk")
                        .HasColumnName("User_Comment_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("StarRatingId")
                        .HasName("PK_Table_1_Star_Rating_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StarRatingId")
                        .IsUnique()
                        .HasName("UX_Table_1_Star_Rating_Id");

                    b.HasIndex("StarRatingValue")
                        .IsUnique()
                        .HasName("UX_Table_1_Star_Rating_Value");

                    b.HasIndex("UserCommentIdFk");

                    b.ToTable("Star_Rating");
                });

            modelBuilder.Entity("Entities.Models.StockTake", b =>
                {
                    b.Property<int>("StockTakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Stock_Take_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("StockTakeDate")
                        .HasColumnName("Stock_take_date")
                        .HasColumnType("date");

                    b.HasKey("StockTakeId")
                        .HasName("PK_Table_1_Stock_Take_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StockTakeId")
                        .IsUnique()
                        .HasName("UX_Table_1_Stock_Take_Id");

                    b.ToTable("Stock_Take");
                });

            modelBuilder.Entity("Entities.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Supplier_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SupplierAddressLine1")
                        .IsRequired()
                        .HasColumnName("Supplier_Address_Line_1")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SupplierAddressLine2")
                        .HasColumnName("Supplier_Address_Line_2")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SupplierAddressLine3")
                        .HasColumnName("Supplier_Address_Line_3")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SupplierCity")
                        .IsRequired()
                        .HasColumnName("Supplier_City")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierContactNumber")
                        .IsRequired()
                        .HasColumnName("Supplier_Contact_Number")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SupplierCountry")
                        .IsRequired()
                        .HasColumnName("Supplier_Country")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierDescription")
                        .HasColumnName("Supplier_Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SupplierEmail")
                        .IsRequired()
                        .HasColumnName("Supplier_Email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnName("Supplier_Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SupplierPostalCode")
                        .HasColumnName("Supplier_Postal_Code")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("SupplierId")
                        .HasName("PK_Table_1_Supplier_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SupplierId")
                        .IsUnique()
                        .HasName("UX_Table_1_Supplier_Id");

                    b.HasIndex("SupplierName")
                        .IsUnique()
                        .HasName("UX_Table_1_Supplier_Name");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Entities.Models.SupplierOrder", b =>
                {
                    b.Property<int>("SupplierOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Supplier_Order_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SupplierIdFk")
                        .HasColumnName("Supplier_Id_FK")
                        .HasColumnType("int");

                    b.Property<DateTime>("SupplierOrderDate")
                        .HasColumnName("Supplier_Order_Date")
                        .HasColumnType("date");

                    b.HasKey("SupplierOrderId")
                        .HasName("PK_Table_1_Supplier_Order_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SupplierIdFk");

                    b.HasIndex("SupplierOrderId")
                        .IsUnique()
                        .HasName("UX_Table_1_Supplier_Order_Id");

                    b.ToTable("Supplier_Order");
                });

            modelBuilder.Entity("Entities.Models.SupplierOrderLine", b =>
                {
                    b.Property<int>("SupplierOrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Supplier_Order_Line_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryLeadTime")
                        .HasColumnName("Delivery_Lead_Time")
                        .HasColumnType("int");

                    b.Property<double>("DiscountAgreement")
                        .HasColumnName("Discount_Agreement")
                        .HasColumnType("float");

                    b.Property<int>("OrderedQty")
                        .HasColumnName("Ordered_Qty")
                        .HasColumnType("int");

                    b.Property<int>("ProductIdFk")
                        .HasColumnName("Product_Id_FK")
                        .HasColumnType("int");

                    b.Property<double>("ProductStandardPrice")
                        .HasColumnName("Product_Standard_Price")
                        .HasColumnType("float");

                    b.Property<int>("SupplierOrderIdFk")
                        .HasColumnName("Supplier_Order_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("SupplierOrderLineId")
                        .HasName("PK_Supplier_Order_Line_Supplier_Order_Line_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductIdFk");

                    b.HasIndex("SupplierOrderIdFk");

                    b.HasIndex("SupplierOrderLineId");

                    b.ToTable("Supplier_Order_Line");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnName("Contact_Number")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeIdFk")
                        .HasColumnName("Employee_Id_FK")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("Surname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("User_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UX_Table_1_Email");

                    b.HasIndex("EmployeeIdFk");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("UX_Table_1_Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UX_Table_1_Username");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Entities.Models.UserComment", b =>
                {
                    b.Property<int>("UserCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("User_Comment_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RestaurantIdFk")
                        .HasColumnName("Restaurant_Id_FK")
                        .HasColumnType("int");

                    b.Property<string>("UserComment1")
                        .IsRequired()
                        .HasColumnName("User_Comment")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("UserCommentDateCreated")
                        .HasColumnName("User_Comment_Date_Created")
                        .HasColumnType("date");

                    b.HasKey("UserCommentId")
                        .HasName("PK_Table_1_User_Comment_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RestaurantIdFk");

                    b.HasIndex("UserCommentId")
                        .IsUnique()
                        .HasName("UX_Table_1_User_Comment_Id");

                    b.ToTable("User_Comment");
                });

            modelBuilder.Entity("Entities.Models.UserImage", b =>
                {
                    b.Property<int>("UserImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserImage_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageFile")
                        .IsRequired()
                        .HasColumnName("Image_File")
                        .HasColumnType("image");

                    b.HasKey("UserImageId")
                        .HasName("UserImage_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UserImage");
                });

            modelBuilder.Entity("Entities.Models.UserUserImage", b =>
                {
                    b.Property<int>("UserUserImage1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("User_UserImage")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserIdFk")
                        .HasColumnName("User_Id_FK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserImageIdFk")
                        .HasColumnName("UserImage_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("UserUserImage1")
                        .HasName("PK_User_UserImage_User_UserImage")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserIdFk");

                    b.HasIndex("UserImageIdFk");

                    b.HasIndex("UserUserImage1");

                    b.ToTable("User_UserImage");
                });

            modelBuilder.Entity("Entities.Models.UserUserRole", b =>
                {
                    b.Property<int>("UserUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("User_UserRole_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserIdFk")
                        .HasColumnName("User_Id_FK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserRoleIdFk")
                        .HasColumnName("User_Role_Id_FK")
                        .HasColumnType("int");

                    b.HasKey("UserUserRoleId")
                        .HasName("PK_User_UserRole_User_UserRole_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UserIdFk");

                    b.HasIndex("UserUserRoleId");

                    b.ToTable("User_UserRole");
                });

            modelBuilder.Entity("Entities.Models.WriteOffReason", b =>
                {
                    b.Property<int>("WriteOffReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Write_Off_Reason_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("WrittenOffStockIdFkFk")
                        .HasColumnName("Written_Off_Stock_Id_FK_FK")
                        .HasColumnType("int");

                    b.Property<int>("ProductIdFkFk")
                        .HasColumnName("Product_Id_FK_FK")
                        .HasColumnType("int");

                    b.Property<string>("WriteOffReason1")
                        .IsRequired()
                        .HasColumnName("Write_Off_Reason")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("WriteOffReasonId", "WrittenOffStockIdFkFk", "ProductIdFkFk")
                        .HasName("Write_Off_Reason_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("WriteOffReason1")
                        .IsUnique()
                        .HasName("UX_Table_1_Write_Off_Reason");

                    b.HasIndex("WriteOffReasonId")
                        .IsUnique()
                        .HasName("UX_Table_1_Write_Off_Reason_Id");

                    b.HasIndex("WrittenOffStockIdFkFk", "ProductIdFkFk");

                    b.ToTable("Write_Off_Reason");
                });

            modelBuilder.Entity("Entities.Models.WrittenOffStock", b =>
                {
                    b.Property<int>("WrittenOfStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Written_Of_Stock_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("WrittenOfStockDate")
                        .HasColumnName("Written_Of_Stock_Date")
                        .HasColumnType("date");

                    b.HasKey("WrittenOfStockId")
                        .HasName("PK_Table_1_Written_Of_Stock_Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("WrittenOfStockId")
                        .IsUnique()
                        .HasName("UX_Table_1_Written_Of_Stock_Id");

                    b.ToTable("Written_Off_Stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.Advertisement", b =>
                {
                    b.HasOne("Entities.Models.AdvertisementDate", "AdvertisementDateIdFkNavigation")
                        .WithMany("Advertisement")
                        .HasForeignKey("AdvertisementDateIdFk")
                        .HasConstraintName("Advertisement_Advertisement_Date_FK");

                    b.HasOne("Entities.Models.AdvertisementPrice", "AdvertisementPriceIdFkNavigation")
                        .WithMany("Advertisement")
                        .HasForeignKey("AdvertisementPriceIdFk")
                        .HasConstraintName("Advertisement_Advertisement_Price_FK");
                });

            modelBuilder.Entity("Entities.Models.AttendanceSheet", b =>
                {
                    b.HasOne("Entities.Models.Employee", "EmployeeIdFkNavigation")
                        .WithMany("AttendanceSheet")
                        .HasForeignKey("EmployeeIdFk")
                        .HasConstraintName("Attendance_Sheet_Employee_FK");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("Employee")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("Employee_Restaurant_FK");
                });

            modelBuilder.Entity("Entities.Models.EmployeeShift", b =>
                {
                    b.HasOne("Entities.Models.Employee", "EmployeeIdFkNavigation")
                        .WithMany("EmployeeShift")
                        .HasForeignKey("EmployeeIdFk")
                        .HasConstraintName("Table_1_Employee_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.Shift", "ShiftIdFkNavigation")
                        .WithMany("EmployeeShift")
                        .HasForeignKey("ShiftIdFk")
                        .HasConstraintName("Table_1_Shift_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.ItemTypeMenuMenuItem", b =>
                {
                    b.HasOne("Entities.Models.MenuItem", "MenuItemIdFkNavigation")
                        .WithMany("ItemTypeMenuMenuItem")
                        .HasForeignKey("MenuItemIdFk")
                        .HasConstraintName("Table_1_Menu_Item_FK_1")
                        .IsRequired();

                    b.HasOne("Entities.Models.MenuItemType", "MenuItemTypeIdFkNavigation")
                        .WithMany("ItemTypeMenuMenuItem")
                        .HasForeignKey("MenuItemTypeIdFk")
                        .HasConstraintName("Table_1_Menu_Item_Type_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.MenuItem", b =>
                {
                    b.HasOne("Entities.Models.MenuItemCategory", "MenuItemCategoryIdFkNavigation")
                        .WithMany("MenuItem")
                        .HasForeignKey("MenuItemCategoryIdFk")
                        .HasConstraintName("Menu_Item_Menu_Item_Category_FK");

                    b.HasOne("Entities.Models.MenuItemPrice", "MenuItemPriceIdFkNavigation")
                        .WithMany("MenuItem")
                        .HasForeignKey("MenuItemPriceIdFk")
                        .HasConstraintName("Menu_Item_Menu_Item_Price_FK");
                });

            modelBuilder.Entity("Entities.Models.MenuItemAllergy", b =>
                {
                    b.HasOne("Entities.Models.Allergy", "AllergyIdFkNavigation")
                        .WithMany("MenuItemAllergy")
                        .HasForeignKey("AllergyIdFk")
                        .HasConstraintName("Table_1_Allergy_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.MenuItem", "MenuItemIdFkNavigation")
                        .WithMany("MenuItemAllergy")
                        .HasForeignKey("MenuItemIdFk")
                        .HasConstraintName("Table_1_Menu_Item_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.MenuItemSpecial", b =>
                {
                    b.HasOne("Entities.Models.MenuItem", "MenuItemIdFkNavigation")
                        .WithMany("MenuItemSpecial")
                        .HasForeignKey("MenuItemIdFk")
                        .HasConstraintName("Table_1_Menu_Item_FK_2")
                        .IsRequired();

                    b.HasOne("Entities.Models.Special", "SpecialIdFkNavigation")
                        .WithMany("MenuItemSpecial")
                        .HasForeignKey("SpecialIdFk")
                        .HasConstraintName("Table_1_Special_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.MenuRestaurant", b =>
                {
                    b.HasOne("Entities.Models.Menu", "MenuIdFkNavigation")
                        .WithMany("MenuRestaurant")
                        .HasForeignKey("MenuIdFk")
                        .HasConstraintName("Menu_Restaurant_Menu_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.MenuItem", "MenuItemIdFkNavigation")
                        .WithMany("MenuRestaurant")
                        .HasForeignKey("MenuItemIdFk")
                        .HasConstraintName("Menu_Restaurant_Menu_Item_FK");

                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("MenuRestaurant")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("Menu_Restaurant_Restaurant_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.HasOne("Entities.Models.OrderStatus", "OrderStatusIdFkNavigation")
                        .WithMany("Order")
                        .HasForeignKey("OrderStatusIdFk")
                        .HasConstraintName("Order_Order_Status_FK");
                });

            modelBuilder.Entity("Entities.Models.OrderLine", b =>
                {
                    b.HasOne("Entities.Models.MenuItem", "MenuItemIdFkNavigation")
                        .WithMany("OrderLine")
                        .HasForeignKey("MenuItemIdFk")
                        .HasConstraintName("Order_Line_Menu_Item_FK");

                    b.HasOne("Entities.Models.Order", "OrderIdFkNavigation")
                        .WithMany("OrderLine")
                        .HasForeignKey("OrderIdFk")
                        .HasConstraintName("Order_Line_Order_FK");

                    b.HasOne("Entities.Models.Special", "SpecialIdFkNavigation")
                        .WithMany("OrderLine")
                        .HasForeignKey("SpecialIdFk")
                        .HasConstraintName("Order_Line_Special_FK");

                    b.HasOne("Entities.Models.User", "UserIdFkNavigation")
                        .WithMany("OrderLine")
                        .HasForeignKey("UserIdFk")
                        .HasConstraintName("Order_Line_User_FK");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.ProductCategory", "ProductCategoryIdFkNavigation")
                        .WithMany("Product")
                        .HasForeignKey("ProductCategoryIdFk")
                        .HasConstraintName("Product_Product_Category_FK");

                    b.HasOne("Entities.Models.ProductReorderFreq", "ProductReorderFreqIdFkNavigation")
                        .WithMany("Product")
                        .HasForeignKey("ProductReorderFreqIdFk")
                        .HasConstraintName("Product_Product_Reorder_Freq_FK");

                    b.HasOne("Entities.Models.ProductType", "ProductTypeIdFkNavigation")
                        .WithMany("Product")
                        .HasForeignKey("ProductTypeIdFk")
                        .HasConstraintName("Product_Product_Type_FK");
                });

            modelBuilder.Entity("Entities.Models.ProductStockTake", b =>
                {
                    b.HasOne("Entities.Models.Employee", "EmployeeIdFkNavigation")
                        .WithMany("ProductStockTake")
                        .HasForeignKey("EmployeeIdFk")
                        .HasConstraintName("Table_1_Employee_FK_1");

                    b.HasOne("Entities.Models.Product", "ProductIdFkNavigation")
                        .WithMany("ProductStockTake")
                        .HasForeignKey("ProductIdFk")
                        .HasConstraintName("Table_1_Product_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.StockTake", "StockTakeIdFkNavigation")
                        .WithMany("ProductStockTake")
                        .HasForeignKey("StockTakeIdFk")
                        .HasConstraintName("Product_Stock_Take_Stock_Take_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.ProductWrittenOff", b =>
                {
                    b.HasOne("Entities.Models.Employee", "EmployeeIdFkNavigation")
                        .WithMany("ProductWrittenOff")
                        .HasForeignKey("EmployeeIdFk")
                        .HasConstraintName("Product_Written_Off_Employee_FK");

                    b.HasOne("Entities.Models.Product", "ProductIdFkNavigation")
                        .WithMany("ProductWrittenOff")
                        .HasForeignKey("ProductIdFk")
                        .HasConstraintName("Table_1_Product_FK_1")
                        .IsRequired();

                    b.HasOne("Entities.Models.WrittenOffStock", "WrittenOffStockIdFkNavigation")
                        .WithMany("ProductWrittenOff")
                        .HasForeignKey("WrittenOffStockIdFk")
                        .HasConstraintName("Table_1_Written_Off_Stock_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.QrCode", b =>
                {
                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("QrCode")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("QrCode_Restaurant_FK");
                });

            modelBuilder.Entity("Entities.Models.QrCodeSeating", b =>
                {
                    b.HasOne("Entities.Models.Order", "OrderIdFkNavigation")
                        .WithMany("QrCodeSeating")
                        .HasForeignKey("OrderIdFk")
                        .HasConstraintName("QrCode_Seating_Order_FK");

                    b.HasOne("Entities.Models.QrCode", "QrCodeIdFkNavigation")
                        .WithMany("QrCodeSeating")
                        .HasForeignKey("QrCodeIdFk")
                        .HasConstraintName("QrCode_Seating_QrCode_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.Seating", "SeatingIdFkNavigation")
                        .WithMany("QrCodeSeating")
                        .HasForeignKey("SeatingIdFk")
                        .HasConstraintName("QrCode_Seating_Seating_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.ResaurantFacilityRef", b =>
                {
                    b.HasOne("Entities.Models.RestaurantFacility", "RestaurantFacilityIdFkNavigation")
                        .WithMany("ResaurantFacilityRef")
                        .HasForeignKey("RestaurantFacilityIdFk")
                        .HasConstraintName("Res_Fac_Restaurant_Facility_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("ResaurantFacilityRef")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("Table_1_Restaurant_FK_1")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Reservation", b =>
                {
                    b.HasOne("Entities.Models.ReservationStatus", "ReservationStatusIdFkNavigation")
                        .WithMany("Reservation")
                        .HasForeignKey("ReservationStatusIdFk")
                        .HasConstraintName("Reservation_Reservation_Status_FK");

                    b.HasOne("Entities.Models.User", "UserIdFkNavigation")
                        .WithMany("Reservation")
                        .HasForeignKey("UserIdFk")
                        .HasConstraintName("Reservation_User_FK");
                });

            modelBuilder.Entity("Entities.Models.ReservationRestaurant", b =>
                {
                    b.HasOne("Entities.Models.Reservation", "ReservationIdFkNavigation")
                        .WithMany("ReservationRestaurant")
                        .HasForeignKey("ReservationIdFk")
                        .HasConstraintName("Reservation_Restaurant_Reservation_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("ReservationRestaurant")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("Reservation_Restaurant_Restaurant_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Restaurant", b =>
                {
                    b.HasOne("Entities.Models.RestaurantStatus", "RestaurantStatusIdFkNavigation")
                        .WithMany("Restaurant")
                        .HasForeignKey("RestaurantStatusIdFk")
                        .HasConstraintName("Restaurant_Restaurant_Status_FK");

                    b.HasOne("Entities.Models.SocialMedia", "SocialMedia")
                        .WithMany("Restaurant")
                        .HasForeignKey("SocialMediaIdFk", "SocialMediaTypeIdFkFk")
                        .HasConstraintName("Restaurant_Social_Media_FK");
                });

            modelBuilder.Entity("Entities.Models.RestaurantAdvertisement", b =>
                {
                    b.HasOne("Entities.Models.Advertisement", "AdvertisementIdFkNavigation")
                        .WithMany("RestaurantAdvertisement")
                        .HasForeignKey("AdvertisementIdFk")
                        .HasConstraintName("Table_1_Advertisement_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("RestaurantAdvertisement")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("Table_1_Restaurant_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.RestaurantImage", b =>
                {
                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("RestaurantImage")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("Restaurant_Image_Restaurant_FK");
                });

            modelBuilder.Entity("Entities.Models.RestaurantRestaurantImage", b =>
                {
                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("RestaurantRestaurantImage")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("Restaurant_Restaurant_Image_Restaurant_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.RestaurantImage", "RestaurantImageIdFkNavigation")
                        .WithMany("RestaurantRestaurantImage")
                        .HasForeignKey("RestaurantImageIdFk")
                        .HasConstraintName("Restaurant_Restaurant_Image_Restaurant_Image_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.RestaurantTypeReference", b =>
                {
                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("RestaurantTypeReference")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("Table_1_Restaurant_FK_2")
                        .IsRequired();

                    b.HasOne("Entities.Models.RestaurantType", "RestaurantTypeIdFkNavigation")
                        .WithMany("RestaurantTypeReference")
                        .HasForeignKey("RestaurantTypeIdFk")
                        .HasConstraintName("Table_1_Restaurant_Type_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Seating", b =>
                {
                    b.HasOne("Entities.Models.Reservation", "ReservationIdFkNavigation")
                        .WithMany("Seating")
                        .HasForeignKey("ReservationIdFk")
                        .HasConstraintName("Seating_Reservation_FK");
                });

            modelBuilder.Entity("Entities.Models.SeatingLayout", b =>
                {
                    b.HasOne("Entities.Models.LayoutType", "LayoutTypeIdFkNavigation")
                        .WithMany("SeatingLayout")
                        .HasForeignKey("LayoutTypeIdFk")
                        .HasConstraintName("Seating_Layout_Layout_Type_FK")
                        .IsRequired();

                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("SeatingLayout")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("Seating_Layout_Restaurant_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Shift", b =>
                {
                    b.HasOne("Entities.Models.ShiftStatus", "ShiftStatusIdFkNavigation")
                        .WithMany("Shift")
                        .HasForeignKey("ShiftStatusIdFk")
                        .HasConstraintName("Shift_Shift_Status_FK");
                });

            modelBuilder.Entity("Entities.Models.SocialMedia", b =>
                {
                    b.HasOne("Entities.Models.SocialMediaType", "SocialMediaTypeIdFkNavigation")
                        .WithMany("SocialMedia")
                        .HasForeignKey("SocialMediaTypeIdFk")
                        .HasConstraintName("Social_Media_Social_Media_Type_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.SpecialPrice", b =>
                {
                    b.HasOne("Entities.Models.Special", "SpecialIdFkNavigation")
                        .WithMany("SpecialPrice")
                        .HasForeignKey("SpecialIdFk")
                        .HasConstraintName("Special_Price_Special_FK");
                });

            modelBuilder.Entity("Entities.Models.StarRating", b =>
                {
                    b.HasOne("Entities.Models.UserComment", "UserCommentIdFkNavigation")
                        .WithMany("StarRating")
                        .HasForeignKey("UserCommentIdFk")
                        .HasConstraintName("Star_Rating_User_Comment_FK");
                });

            modelBuilder.Entity("Entities.Models.SupplierOrder", b =>
                {
                    b.HasOne("Entities.Models.Supplier", "SupplierIdFkNavigation")
                        .WithMany("SupplierOrder")
                        .HasForeignKey("SupplierIdFk")
                        .HasConstraintName("Supplier_Order_Supplier_FK");
                });

            modelBuilder.Entity("Entities.Models.SupplierOrderLine", b =>
                {
                    b.HasOne("Entities.Models.Product", "ProductIdFkNavigation")
                        .WithMany("SupplierOrderLine")
                        .HasForeignKey("ProductIdFk")
                        .HasConstraintName("Table_1_Product_FK_2")
                        .IsRequired();

                    b.HasOne("Entities.Models.SupplierOrder", "SupplierOrderIdFkNavigation")
                        .WithMany("SupplierOrderLine")
                        .HasForeignKey("SupplierOrderIdFk")
                        .HasConstraintName("Table_1_Supplier_Order_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Employee", "EmployeeIdFkNavigation")
                        .WithMany("User")
                        .HasForeignKey("EmployeeIdFk")
                        .HasConstraintName("User_Employee_FK");
                });

            modelBuilder.Entity("Entities.Models.UserComment", b =>
                {
                    b.HasOne("Entities.Models.Restaurant", "RestaurantIdFkNavigation")
                        .WithMany("UserComment")
                        .HasForeignKey("RestaurantIdFk")
                        .HasConstraintName("User_Comment_Restaurant_FK");
                });

            modelBuilder.Entity("Entities.Models.UserUserImage", b =>
                {
                    b.HasOne("Entities.Models.User", "UserIdFkNavigation")
                        .WithMany("UserUserImage")
                        .HasForeignKey("UserIdFk")
                        .HasConstraintName("User_UserImage_User_FK");

                    b.HasOne("Entities.Models.UserImage", "UserImageIdFkNavigation")
                        .WithMany("UserUserImage")
                        .HasForeignKey("UserImageIdFk")
                        .HasConstraintName("User_UserImage_UserImage_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.UserUserRole", b =>
                {
                    b.HasOne("Entities.Models.User", "UserIdFkNavigation")
                        .WithMany("UserUserRole")
                        .HasForeignKey("UserIdFk")
                        .HasConstraintName("User_UserRole_User_FK");
                });

            modelBuilder.Entity("Entities.Models.WriteOffReason", b =>
                {
                    b.HasOne("Entities.Models.ProductWrittenOff", "ProductWrittenOff")
                        .WithMany("WriteOffReason")
                        .HasForeignKey("WrittenOffStockIdFkFk", "ProductIdFkFk")
                        .HasConstraintName("Write_Off_Reason_Product_Written_Off_FK")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
